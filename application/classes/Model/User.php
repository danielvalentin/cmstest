<?php defined('SYSPATH') or die('No direct script access.');class Model_User extends Model_Auth_User {		protected $_has_many = array(		'tokens'			=> array('model' => 'User_Token'),		'roles'      		=> array('through' => 'roles_users'),		'dashboards'		=> array(),		'contents'			=> array(),		'messages'			=> array()	);		protected $_belongs_to = array(		'file' => array()	);		public function email_available(Validation $validation, $field)	{		if ($this->unique_key_exists($validation[$field], 'email'))		{			$validation->error($field, 'email_available', array($validation[$field]));		}	}		public function info()	{		$roles = $this->roles->find_all();		$rolesarr = array();		if((bool)$roles->count())		{			foreach($roles as $role)			{				$rolesarr[] = $role->info();			}		}		return array(			'id' => $this->id,			'email' => $this->email,			'name' => $this->name,			'bio' => $this->bio,			'logins' => $this->logins,			'gravatar' => array(				'mini' => $this->gravatar(32),				'medium' => $this->gravatar(145)			),			'avatar' => array(				'id' => $this->file_id,				'img' => array(					'mini' => $this->avatar(32),					'medium' => $this->avatar(145)				)			),			'last_login' => array(				'timestamp' => $this->last_login,				'formatted' => ($this->last_login>0?date('d-m-Y H:i', $this->last_login):__('Never'))			),			'delete' => 0,			'created' => array(				'timestamp' => $this->created,				'formatted' => date('d-m-Y H:i', $this->created)			),			'roles' => $rolesarr		);	}		public function image($size = 150)	{		if($this->file_id == 0)		{			return $this->gravatar($size);		}		return $this->avatar($size);	}		public function avatar($size = 150)	{		if($this->file_id != 0)		{			return $this->file->exact($size, $size);		}		return false;	}		public function gravatar($size = 150)	{		$email = $this->email;		$email = trim($email);		$email = strtolower($email);		$email = md5($email);		return 'http://gravatar.com/avatar/'.$email.'?s='.$size.'&rating=pg';	}		public function send_password_email($password)	{		$sitename = cms::option('sitename');		try		{			$mail = mail::create('userautocreated')				->to($this->email)				->tokenise(array(					'brugernavn' => $this->name,					'password' => $password				))				->send();			return true;		}		catch(exception $e)		{			log::instance('Couldnt send user autogenerated password', $e);		}		return false;	}		public function delete()	{		foreach($this->tokens->find_all() as $token)		{			$token->delete();		}		foreach($this->roles->find_all() as $role)		{			$this->remove('roles', $role -> id);		}		return parent::delete();	}		public function rules()	{		return array(			'name' => array(				array('not_empty'),				array('min_length', array(':value', 2)),				array('max_length', array(':value', 120))			),			'password' => array(				array('not_empty'),				array('min_length', array(':value', 5)),				array('max_length', array(':value', 64))			),			'email' => array(				array('email'),				array('not_empty'),				array('min_length', array(':value', 4)),				array('max_length', array(':value', 127)),				array(array($this, 'unique'), array('email', ':value'))			)		);	}		public static function get_password_validation($values)	{		return Validation::factory($values)			->rule('password', 'min_length', array(':value', 5))			->rule('password_confirm', 'matches', array(':validation', ':field', 'password'));	}		public function get_last_login()	{		return date('d/m, Y', $this -> last_login) . ' kl. ' . date('H:i:s', $this -> last_login);	}		public function labels()	{		return array(			'email'            => 'e-mail adresse',			'password'         => 'password',		);	}		public function filters()	{		return array(			'password' => array(				array(array(Auth_ORM::instance(), 'hash'))			),			'name' => array(				array('Security::xss_clean', array(':value'))			),			'email' => array(				array('Security::xss_clean', array(':value'))			)		);	}		public function get_newsletter()	{		return $this->newsletter;	}		public function has_role($name)	{		foreach($this->roles->find_all() as $role)		{			if($role->name == $name)			{				return true;			}		}		return false;	}		public function set_roles($roleids = false)	{		$this->clear_roles();		if($roleids)		{			$this -> add('roles', $roleids);		}	}		public function save(validation $val = null)	{		if(!$this->loaded())		{			$this->created = time();		}		return parent::save();	}		public function clear_roles()	{		foreach($this -> roles -> find_all() as $role)		{			$this -> remove('roles', $role -> id);		}	}		public function get_roles()	{		return $this -> roles -> find_all();	}		public function get_url()	{		return user::url('konto/' . $this->id);	}		public function register($data)	{		$data = Validation::factory($data)			-> rule('password', 'not_empty')			-> rule('password', 'min_length', array(':value', 5))			-> rule('password', 'max_length', array(':value', 64))			-> label('password', 'Password')						-> rule('password_confirm', 'not_empty')			-> rule('password_confirm', 'matches', array(':validation', ':field', 'password'))			-> label('password_confirm', 'Bekræft password')						-> rule('name', 'not_empty')			-> rule('name', 'min_length', array(':value', 2))			-> rule('name', 'max_length', array(':value', 64))			-> rule('name', 'regex', array(':field', '/^[-\pL ]++$/uD'))			-> label('name', 'Fornavn')						-> rule('email', 'email')			-> rule('email', 'not_empty')			-> rule('email', array($this, 'email_available'), array(':validation', ':field'))			-> label('email', 'Email');					if(!$data -> check())		{			return $data -> errors('validation/user');		}				$this -> name = $data['name'];		$this -> email = $data['email'];		$this -> password = $data['password'];				try		{			$this->save();		}		catch(ORM_Validation_Exception $e)		{			return $e->errors('validation/user');		}			}		// Creating a new user from the CMS	public function cmsregister($data)	{		$data = Validation::factory($data)			-> rule('password', 'not_empty')			-> rule('password', 'min_length', array(':value', 5))			-> rule('password', 'max_length', array(':value', 64))			-> label('password', 'Password')						-> rule('name', 'not_empty')			-> rule('name', 'min_length', array(':value', 2))			-> rule('name', 'max_length', array(':value', 64))			-> rule('name', 'regex', array(':field', '/^[-\pL ]++$/uD'))			-> label('name', 'Fornavn')						-> rule('email', 'email')			-> rule('email', 'not_empty')			-> rule('email', array($this, 'email_available'), array(':validation', ':field'))			-> label('email', 'Email');					if(!$data->check())		{			throw new ORM_Validation_Exception('user', $data);		}				$this->name = arr::get($data, 'name','');		$this->email = arr::get($data, 'email','');		$this->password = arr::get($data, 'password','');				$this->save();	}		public function updater($data)	{		if(!isset($data['password']) || empty($data['password']))		{			unset($data['password'], $data['password_confirm']);		}		$data = Validation::factory($data);		if(isset($data['password']) && !empty($data['password']))		{			$data = $data -> rule('password', 'not_empty')				-> rule('password', 'min_length', array(':value', 5))				-> rule('password', 'max_length', array(':value', 64))				-> label('password', 'Password')								-> rule('password_confirm', 'not_empty')				-> rule('password_confirm', 'matches', array(':validation', ':field', 'password'))				-> label('password_confirm', 'Bekræft password');		}					$data = $data -> rule('name', 'not_empty')			-> rule('name', 'min_length', array(':value', 2))			-> rule('name', 'max_length', array(':value', 64))			-> rule('name', 'regex', array(':value', '/^[-\pL ]++$/uD'))			-> label('name', 'Fornavn')						-> rule('email', 'email')			-> rule('email', 'not_empty')			-> rule('email', array($this, 'email_available'), array(':validation', ':field'))			-> label('email', 'Email');					if(isset($data['address1']))		{			$data = $data -> rule('address1', 'regex', array(':value', '/^[-\pL\d,. \-\']++$/uD'));		}		if(isset($data['address2']))		{			$data = $data -> rule('address2', 'regex', array(':value', '/^[-\pL\d,. \-\']++$/uD'));		}		if(isset($data['zip']))		{			$data = $data -> rule('zip', 'numeric');		}		if(isset($data['city']))		{			$data = $data -> rule('city', 'regex', array(':value', '/^[-\pL ]++$/uD'));		}		if(isset($data['newsletter']))		{			$data = $data -> rule('newsletter', 'equals', array(':value', 'yes'));		}					if(!$data -> check())		{			return $data -> errors('validation/user');		}				$this -> name = $data['name'];		$this -> email = $data['email'];		if(isset($data['password']) && !empty($data['password']))		{			$this -> password = $data['password'];		}				if(isset($data['address1']))		{			$this -> address1 = $data['address1'];		}		if(isset($data['address2']))		{			$this -> address2 = $data['address2'];		}		if(isset($data['zip']))		{			$this -> zip = $data['zip'];		}		if(isset($data['city']))		{			$this -> city = $data['city'];		}		if(isset($data['newsletter']))		{			$this -> newsletter = true;		}		else		{			$this -> newsletter = false;		}				if(isset($data['password']) && !empty($data['password']))		{			$this -> password = $data['password'];		}				try		{			$this -> save();		}		catch(ORM_Validation_Exception $e)		{			return $e -> errors('validation/user');		}	}		public function update_password($data)	{		$data = Validation::factory($data)			-> rule('password', 'not_empty')			-> rule('password', 'min_length', array(':value', 4))			-> rule('password', 'max_length', array(':value', 64))			-> label('password', 'Password')						-> rule('password_confirm', 'not_empty')			-> rule('password_confirm', 'matches', array(':validation', ':field', 'password'))			-> label('password_confirm', 'Bekræft password');					if(!$data->check())		{			return $data -> errors('validation/user');		}		$this->password = $data['password'];		$this->save();		return false;	}		public function add_role($role = 'login')	{		$role = new Model_Role(array('name' => $role));		$this->add('roles', $role);		$this->save();	}		/*public function save(Validation $validation = NULL)	{		if(!$this->loaded() && Valid::email($this->email))		{			$this->send_password_email($this->password);		}		return parent::save($validation);	}*/		public function created($format = 'd/m-Y')	{		return date($format, $this->created);	}	}